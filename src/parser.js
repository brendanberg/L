var L = {};
L.AST = require('./ast');

// BEGIN(BROWSER)
L.Parser = (function(){
	/*
	 * Generated by PEG.js 0.7.0.
	 *
	 * http://pegjs.majda.cz/
	 */
	
	function quote(s) {
		/*
		 * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
		 * string literal except for the closing quote character, backslash,
		 * carriage return, line separator, paragraph separator, and line feed.
		 * Any character may appear in the form of an escape sequence.
		 *
		 * For portability, we also escape escape all control and non-ASCII
		 * characters. Note that "\0" and "\v" escape sequences are not used
		 * because JSHint does not like the first and IE the second.
		 */
		 return '"' + s
			.replace(/\\/g, '\\\\')	 // backslash
			.replace(/"/g, '\\"')		 // closing quote character
			.replace(/\x08/g, '\\b') // backspace
			.replace(/\t/g, '\\t')	 // horizontal tab
			.replace(/\n/g, '\\n')	 // line feed
			.replace(/\f/g, '\\f')	 // form feed
			.replace(/\r/g, '\\r')	 // carriage return
			.replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
			+ '"';
	}
	
	var result = {
		/*
		 * Parses the input with a generated parser. If the parsing is successfull,
		 * returns a value explicitly or implicitly specified by the grammar from
		 * which the parser was generated (see |PEG.buildParser|). If the parsing is
		 * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
		 */
		parse: function(input, startRule) {
			var parseFunctions = {
				"expressionList": parse_expressionList,
				"pureExpressionList": parse_pureExpressionList,
				"expression": parse_expression,
				"pureExpression": parse_pureExpression,
				"expressionNoInfix": parse_expressionNoInfix,
				"message": parse_message,
				"parameterList": parse_parameterList,
				"prefixExpression": parse_prefixExpression,
				"value": parse_value,
				"infixOperator": parse_infixOperator,
				"prefixOperator": parse_prefixOperator,
				"function": parse_function,
				"block": parse_block,
				"identifierList": parse_identifierList,
				"list": parse_list,
				"dictionary": parse_dictionary,
				"keyValueList": parse_keyValueList,
				"keyValuePair": parse_keyValuePair,
				"identifier": parse_identifier,
				"name": parse_name,
				"postfixModifier": parse_postfixModifier,
				"string": parse_string,
				"escapedChar": parse_escapedChar,
				"number": parse_number,
				"integer": parse_integer,
				"decimal": parse_decimal,
				"scientific": parse_scientific,
				"hex": parse_hex,
				"imaginary": parse_imaginary,
				"_": parse__,
				"__": parse___,
				"$": parse_$
			};
			
			if (startRule !== undefined) {
				if (parseFunctions[startRule] === undefined) {
					throw new Error("Invalid rule name: " + quote(startRule) + ".");
				}
			} else {
				startRule = "expressionList";
			}
			
			var pos = 0;
			var reportFailures = 0;
			var rightmostFailuresPos = 0;
			var rightmostFailuresExpected = [];
			
			function padLeft(input, padding, length) {
				var result = input;
				
				var padLength = length - input.length;
				for (var i = 0; i < padLength; i++) {
					result = padding + result;
				}
				
				return result;
			}
			
			function escape(ch) {
				var charCode = ch.charCodeAt(0);
				var escapeChar;
				var length;
				
				if (charCode <= 0xFF) {
					escapeChar = 'x';
					length = 2;
				} else {
					escapeChar = 'u';
					length = 4;
				}
				
				return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
			}
			
			function matchFailed(failure) {
				if (pos < rightmostFailuresPos) {
					return;
				}
				
				if (pos > rightmostFailuresPos) {
					rightmostFailuresPos = pos;
					rightmostFailuresExpected = [];
				}
				
				rightmostFailuresExpected.push(failure);
			}
			
			function parse_expressionList() {
				var result0, result1, result2, result3, result4;
				var pos0, pos1, pos2, pos3;
				
				pos0 = pos;
				pos1 = pos;
				result0 = parse_expression();
				if (result0 !== null) {
					result1 = [];
					pos2 = pos;
					pos3 = pos;
					result2 = parse_$();
					if (result2 !== null) {
						result3 = parse__();
						if (result3 !== null) {
							result4 = parse_expression();
							if (result4 !== null) {
								result2 = [result2, result3, result4];
							} else {
								result2 = null;
								pos = pos3;
							}
						} else {
							result2 = null;
							pos = pos3;
						}
					} else {
						result2 = null;
						pos = pos3;
					}
					if (result2 !== null) {
						result2 = (function(offset, exp) { return exp; })(pos2, result2[2]);
					}
					if (result2 === null) {
						pos = pos2;
					}
					while (result2 !== null) {
						result1.push(result2);
						pos2 = pos;
						pos3 = pos;
						result2 = parse_$();
						if (result2 !== null) {
							result3 = parse__();
							if (result3 !== null) {
								result4 = parse_expression();
								if (result4 !== null) {
									result2 = [result2, result3, result4];
								} else {
									result2 = null;
									pos = pos3;
								}
							} else {
								result2 = null;
								pos = pos3;
							}
						} else {
							result2 = null;
							pos = pos3;
						}
						if (result2 !== null) {
							result2 = (function(offset, exp) { return exp; })(pos2, result2[2]);
						}
						if (result2 === null) {
							pos = pos2;
						}
					}
					if (result1 !== null) {
						result2 = parse_$();
						result2 = result2 !== null ? result2 : "";
						if (result2 !== null) {
							result3 = parse__();
							if (result3 !== null) {
								result0 = [result0, result1, result2, result3];
							} else {
								result0 = null;
								pos = pos1;
							}
						} else {
							result0 = null;
							pos = pos1;
						}
					} else {
						result0 = null;
						pos = pos1;
					}
				} else {
					result0 = null;
					pos = pos1;
				}
				if (result0 !== null) {
					result0 = (function(offset, first, rest) {
							if (rest.length > 0) {
								return new L.AST.ExpressionList([first].concat(rest));
							} else {
								return first;
							}
						})(pos0, result0[0], result0[1]);
				}
				if (result0 === null) {
					pos = pos0;
				}
				return result0;
			}
			
			function parse_pureExpressionList() {
				var result0, result1, result2, result3, result4;
				var pos0, pos1, pos2, pos3;
				
				pos0 = pos;
				pos1 = pos;
				result0 = parse_pureExpression();
				if (result0 !== null) {
					result1 = [];
					pos2 = pos;
					pos3 = pos;
					result2 = parse_$();
					if (result2 !== null) {
						result3 = parse__();
						if (result3 !== null) {
							result4 = parse_pureExpression();
							if (result4 !== null) {
								result2 = [result2, result3, result4];
							} else {
								result2 = null;
								pos = pos3;
							}
						} else {
							result2 = null;
							pos = pos3;
						}
					} else {
						result2 = null;
						pos = pos3;
					}
					if (result2 !== null) {
						result2 = (function(offset, exp) { return exp; })(pos2, result2[2]);
					}
					if (result2 === null) {
						pos = pos2;
					}
					while (result2 !== null) {
						result1.push(result2);
						pos2 = pos;
						pos3 = pos;
						result2 = parse_$();
						if (result2 !== null) {
							result3 = parse__();
							if (result3 !== null) {
								result4 = parse_pureExpression();
								if (result4 !== null) {
									result2 = [result2, result3, result4];
								} else {
									result2 = null;
									pos = pos3;
								}
							} else {
								result2 = null;
								pos = pos3;
							}
						} else {
							result2 = null;
							pos = pos3;
						}
						if (result2 !== null) {
							result2 = (function(offset, exp) { return exp; })(pos2, result2[2]);
						}
						if (result2 === null) {
							pos = pos2;
						}
					}
					if (result1 !== null) {
						result2 = parse_$();
						result2 = result2 !== null ? result2 : "";
						if (result2 !== null) {
							result3 = parse__();
							if (result3 !== null) {
								result0 = [result0, result1, result2, result3];
							} else {
								result0 = null;
								pos = pos1;
							}
						} else {
							result0 = null;
							pos = pos1;
						}
					} else {
						result0 = null;
						pos = pos1;
					}
				} else {
					result0 = null;
					pos = pos1;
				}
				if (result0 !== null) {
					result0 = (function(offset, first, rest) {
							if (rest.length > 0) {
								return new L.AST.ExpressionList([first].concat(rest));
							} else {
								return first;
							}
						})(pos0, result0[0], result0[1]);
				}
				if (result0 === null) {
					pos = pos0;
				}
				return result0;
			}
			
			function parse_expression() {
				var result0, result1, result2, result3, result4;
				var pos0, pos1;
				
				pos0 = pos;
				pos1 = pos;
				result0 = parse_pureExpression();
				if (result0 !== null) {
					result1 = parse__();
					if (result1 !== null) {
						if (input.charCodeAt(pos) === 58) {
							result2 = ":";
							pos++;
						} else {
							result2 = null;
							if (reportFailures === 0) {
								matchFailed("\":\"");
							}
						}
						if (result2 !== null) {
							result3 = parse__();
							if (result3 !== null) {
								result4 = parse_pureExpression();
								if (result4 !== null) {
									result0 = [result0, result1, result2, result3, result4];
								} else {
									result0 = null;
									pos = pos1;
								}
							} else {
								result0 = null;
								pos = pos1;
							}
						} else {
							result0 = null;
							pos = pos1;
						}
					} else {
						result0 = null;
						pos = pos1;
					}
				} else {
					result0 = null;
					pos = pos1;
				}
				if (result0 !== null) {
					result0 = (function(offset, e1, e2) {
							var op = new L.AST.InfixOperator(':');
							return new L.AST.InfixExpression(op, e1, e2);
						})(pos0, result0[0], result0[4]);
				}
				if (result0 === null) {
					pos = pos0;
				}
				if (result0 === null) {
					pos0 = pos;
					pos1 = pos;
					result0 = parse_pureExpression();
					if (result0 !== null) {
						result1 = parse__();
						if (result1 !== null) {
							if (input.substr(pos, 2) === "<-") {
								result2 = "<-";
								pos += 2;
							} else {
								result2 = null;
								if (reportFailures === 0) {
									matchFailed("\"<-\"");
								}
							}
							if (result2 !== null) {
								result3 = parse__();
								if (result3 !== null) {
									result4 = parse_pureExpression();
									if (result4 !== null) {
										result0 = [result0, result1, result2, result3, result4];
									} else {
										result0 = null;
										pos = pos1;
									}
								} else {
									result0 = null;
									pos = pos1;
								}
							} else {
								result0 = null;
								pos = pos1;
							}
						} else {
							result0 = null;
							pos = pos1;
						}
					} else {
						result0 = null;
						pos = pos1;
					}
					if (result0 !== null) {
						result0 = (function(offset, e1, e2) {
								return new L.AST.MessageSend(null, e1, e2);
							})(pos0, result0[0], result0[4]);
					}
					if (result0 === null) {
						pos = pos0;
					}
					if (result0 === null) {
						result0 = parse_pureExpression();
					}
				}
				return result0;
			}
			
			function parse_pureExpression() {
				var result0, result1, result2, result3, result4;
				var pos0, pos1, pos2, pos3;
				
				pos0 = pos;
				pos1 = pos;
				result0 = parse_expressionNoInfix();
				if (result0 !== null) {
					pos2 = pos;
					pos3 = pos;
					result1 = parse__();
					if (result1 !== null) {
						result2 = parse_infixOperator();
						if (result2 !== null) {
							result3 = parse__();
							if (result3 !== null) {
								result4 = parse_expression();
								if (result4 !== null) {
									result1 = [result1, result2, result3, result4];
								} else {
									result1 = null;
									pos = pos3;
								}
							} else {
								result1 = null;
								pos = pos3;
							}
						} else {
							result1 = null;
							pos = pos3;
						}
					} else {
						result1 = null;
						pos = pos3;
					}
					if (result1 !== null) {
						result1 = (function(offset, op, e2) {
								return {"op": op, "e2": e2};
							})(pos2, result1[1], result1[3]);
					}
					if (result1 === null) {
						pos = pos2;
					}
					result1 = result1 !== null ? result1 : "";
					if (result1 !== null) {
						result0 = [result0, result1];
					} else {
						result0 = null;
						pos = pos1;
					}
				} else {
					result0 = null;
					pos = pos1;
				}
				if (result0 !== null) {
					result0 = (function(offset, e1, infix) {
							if (infix) {
								return new L.AST.InfixExpression(infix['op'], e1, infix['e2']);
							} else {
								return e1;
							}
						})(pos0, result0[0], result0[1]);
				}
				if (result0 === null) {
					pos = pos0;
				}
				return result0;
			}
			
			function parse_expressionNoInfix() {
				var result0, result1;
				var pos0, pos1;
				
				pos0 = pos;
				pos1 = pos;
				result0 = parse_value();
				if (result0 !== null) {
					result1 = parse_list();
					if (result1 !== null) {
						result0 = [result0, result1];
					} else {
						result0 = null;
						pos = pos1;
					}
				} else {
					result0 = null;
					pos = pos1;
				}
				if (result0 !== null) {
					result0 = (function(offset, val, lst) {
							return new L.AST.Lookup(val, lst);
						})(pos0, result0[0], result0[1]);
				}
				if (result0 === null) {
					pos = pos0;
				}
				if (result0 === null) {
					pos0 = pos;
					pos1 = pos;
					result0 = parse_value();
					if (result0 !== null) {
						result1 = parse_dictionary();
						if (result1 !== null) {
							result0 = [result0, result1];
						} else {
							result0 = null;
							pos = pos1;
						}
					} else {
						result0 = null;
						pos = pos1;
					}
					if (result0 !== null) {
						result0 = (function(offset, val, dct) {
								return new L.AST.Lookup(val, dct);
							})(pos0, result0[0], result0[1]);
					}
					if (result0 === null) {
						pos = pos0;
					}
					if (result0 === null) {
						pos0 = pos;
						pos1 = pos;
						result0 = parse_value();
						if (result0 !== null) {
							result1 = parse_parameterList();
							if (result1 !== null) {
								result0 = [result0, result1];
							} else {
								result0 = null;
								pos = pos1;
							}
						} else {
							result0 = null;
							pos = pos1;
						}
						if (result0 !== null) {
							result0 = (function(offset, val, plist) {
									return new L.AST.Invocation(val, plist);
								})(pos0, result0[0], result0[1]);
						}
						if (result0 === null) {
							pos = pos0;
						}
						if (result0 === null) {
							result0 = parse_prefixExpression();
							if (result0 === null) {
								result0 = parse_value();
							}
						}
					}
				}
				return result0;
			}
			
			function parse_message() {
				var result0, result1;
				var pos0, pos1;
				
				pos0 = pos;
				pos1 = pos;
				result0 = parse_identifier();
				if (result0 !== null) {
					result1 = parse_parameterList();
					result1 = result1 !== null ? result1 : "";
					if (result1 !== null) {
						result0 = [result0, result1];
					} else {
						result0 = null;
						pos = pos1;
					}
				} else {
					result0 = null;
					pos = pos1;
				}
				if (result0 !== null) {
					result0 = (function(offset, id, params) { return new L.AST.Message(id, params); })(pos0, result0[0], result0[1]);
				}
				if (result0 === null) {
					pos = pos0;
				}
				return result0;
			}
			
			function parse_parameterList() {
				var result0, result1, result2, result3, result4, result5, result6, result7;
				var pos0, pos1, pos2, pos3;
				
				pos0 = pos;
				pos1 = pos;
				result0 = parse__();
				if (result0 !== null) {
					if (input.charCodeAt(pos) === 40) {
						result1 = "(";
						pos++;
					} else {
						result1 = null;
						if (reportFailures === 0) {
							matchFailed("\"(\"");
						}
					}
					if (result1 !== null) {
						result2 = parse___();
						if (result2 !== null) {
							result3 = parse_keyValuePair();
							if (result3 === null) {
								result3 = parse_pureExpression();
							}
							if (result3 !== null) {
								result4 = [];
								pos2 = pos;
								pos3 = pos;
								result5 = parse_$();
								if (result5 !== null) {
									result6 = parse__();
									if (result6 !== null) {
										result7 = parse_keyValuePair();
										if (result7 === null) {
											result7 = parse_pureExpression();
										}
										if (result7 !== null) {
											result5 = [result5, result6, result7];
										} else {
											result5 = null;
											pos = pos3;
										}
									} else {
										result5 = null;
										pos = pos3;
									}
								} else {
									result5 = null;
									pos = pos3;
								}
								if (result5 !== null) {
									result5 = (function(offset, item) { return item; })(pos2, result5[2]);
								}
								if (result5 === null) {
									pos = pos2;
								}
								while (result5 !== null) {
									result4.push(result5);
									pos2 = pos;
									pos3 = pos;
									result5 = parse_$();
									if (result5 !== null) {
										result6 = parse__();
										if (result6 !== null) {
											result7 = parse_keyValuePair();
											if (result7 === null) {
												result7 = parse_pureExpression();
											}
											if (result7 !== null) {
												result5 = [result5, result6, result7];
											} else {
												result5 = null;
												pos = pos3;
											}
										} else {
											result5 = null;
											pos = pos3;
										}
									} else {
										result5 = null;
										pos = pos3;
									}
									if (result5 !== null) {
										result5 = (function(offset, item) { return item; })(pos2, result5[2]);
									}
									if (result5 === null) {
										pos = pos2;
									}
								}
								if (result4 !== null) {
									result5 = parse_$();
									result5 = result5 !== null ? result5 : "";
									if (result5 !== null) {
										result6 = parse___();
										if (result6 !== null) {
											if (input.charCodeAt(pos) === 41) {
												result7 = ")";
												pos++;
											} else {
												result7 = null;
												if (reportFailures === 0) {
													matchFailed("\")\"");
												}
											}
											if (result7 !== null) {
												result0 = [result0, result1, result2, result3, result4, result5, result6, result7];
											} else {
												result0 = null;
												pos = pos1;
											}
										} else {
											result0 = null;
											pos = pos1;
										}
									} else {
										result0 = null;
										pos = pos1;
									}
								} else {
									result0 = null;
									pos = pos1;
								}
							} else {
								result0 = null;
								pos = pos1;
							}
						} else {
							result0 = null;
							pos = pos1;
						}
					} else {
						result0 = null;
						pos = pos1;
					}
				} else {
					result0 = null;
					pos = pos1;
				}
				if (result0 !== null) {
					result0 = (function(offset, first, rest) {
							return new L.AST.List([first].concat(rest), {source: 'parameterList'});
						})(pos0, result0[3], result0[4]);
				}
				if (result0 === null) {
					pos = pos0;
				}
				if (result0 === null) {
					pos0 = pos;
					pos1 = pos;
					result0 = parse__();
					if (result0 !== null) {
						if (input.charCodeAt(pos) === 40) {
							result1 = "(";
							pos++;
						} else {
							result1 = null;
							if (reportFailures === 0) {
								matchFailed("\"(\"");
							}
						}
						if (result1 !== null) {
							result2 = parse___();
							if (result2 !== null) {
								if (input.charCodeAt(pos) === 41) {
									result3 = ")";
									pos++;
								} else {
									result3 = null;
									if (reportFailures === 0) {
										matchFailed("\")\"");
									}
								}
								if (result3 !== null) {
									result0 = [result0, result1, result2, result3];
								} else {
									result0 = null;
									pos = pos1;
								}
							} else {
								result0 = null;
								pos = pos1;
							}
						} else {
							result0 = null;
							pos = pos1;
						}
					} else {
						result0 = null;
						pos = pos1;
					}
					if (result0 !== null) {
						result0 = (function(offset) { return new L.AST.List([], {source: 'parameterList'}); })(pos0);
					}
					if (result0 === null) {
						pos = pos0;
					}
				}
				return result0;
			}
			
			function parse_prefixExpression() {
				var result0, result1, result2;
				var pos0, pos1;
				
				pos0 = pos;
				pos1 = pos;
				result0 = parse_prefixOperator();
				if (result0 !== null) {
					result1 = parse__();
					if (result1 !== null) {
						result2 = parse_value();
						if (result2 !== null) {
							result0 = [result0, result1, result2];
						} else {
							result0 = null;
							pos = pos1;
						}
					} else {
						result0 = null;
						pos = pos1;
					}
				} else {
					result0 = null;
					pos = pos1;
				}
				if (result0 !== null) {
					result0 = (function(offset, op, e) {
							return new L.AST.PrefixExpression(op, e);
						})(pos0, result0[0], result0[2]);
				}
				if (result0 === null) {
					pos = pos0;
				}
				return result0;
			}
			
			function parse_value() {
				var result0, result1, result2;
				var pos0, pos1;
				
				result0 = parse_function();
				if (result0 === null) {
					result0 = parse_list();
					if (result0 === null) {
						result0 = parse_dictionary();
						if (result0 === null) {
							result0 = parse_identifier();
							if (result0 === null) {
								result0 = parse_string();
								if (result0 === null) {
									result0 = parse_number();
									if (result0 === null) {
										result0 = parse_block();
										if (result0 === null) {
											pos0 = pos;
											pos1 = pos;
											if (input.charCodeAt(pos) === 40) {
												result0 = "(";
												pos++;
											} else {
												result0 = null;
												if (reportFailures === 0) {
													matchFailed("\"(\"");
												}
											}
											if (result0 !== null) {
												result1 = parse_expression();
												if (result1 !== null) {
													if (input.charCodeAt(pos) === 41) {
														result2 = ")";
														pos++;
													} else {
														result2 = null;
														if (reportFailures === 0) {
															matchFailed("\")\"");
														}
													}
													if (result2 !== null) {
														result0 = [result0, result1, result2];
													} else {
														result0 = null;
														pos = pos1;
													}
												} else {
													result0 = null;
													pos = pos1;
												}
											} else {
												result0 = null;
												pos = pos1;
											}
											if (result0 !== null) {
												result0 = (function(offset, e) { return e; })(pos0, result0[1]);
											}
											if (result0 === null) {
												pos = pos0;
											}
										}
									}
								}
							}
						}
					}
				}
				return result0;
			}
			
			function parse_infixOperator() {
				var result0;
				var pos0;
				
				pos0 = pos;
				if (input.substr(pos, 3) === "//:") {
					result0 = "//:";
					pos += 3;
				} else {
					result0 = null;
					if (reportFailures === 0) {
						matchFailed("\"//:\"");
					}
				}
				if (result0 !== null) {
					result0 = (function(offset) { return new L.AST.InfixOperator('//:'); })(pos0);
				}
				if (result0 === null) {
					pos = pos0;
				}
				if (result0 === null) {
					pos0 = pos;
					if (input.substr(pos, 2) === "//") {
						result0 = "//";
						pos += 2;
					} else {
						result0 = null;
						if (reportFailures === 0) {
							matchFailed("\"//\"");
						}
					}
					if (result0 !== null) {
						result0 = (function(offset) { return new L.AST.InfixOperator('//'); })(pos0);
					}
					if (result0 === null) {
						pos = pos0;
					}
					if (result0 === null) {
						pos0 = pos;
						if (input.substr(pos, 2) === "/:") {
							result0 = "/:";
							pos += 2;
						} else {
							result0 = null;
							if (reportFailures === 0) {
								matchFailed("\"/:\"");
							}
						}
						if (result0 !== null) {
							result0 = (function(offset) { return new L.AST.InfixOperator('/:'); })(pos0);
						}
						if (result0 === null) {
							pos = pos0;
						}
						if (result0 === null) {
							pos0 = pos;
							if (input.substr(pos, 2) === "+:") {
								result0 = "+:";
								pos += 2;
							} else {
								result0 = null;
								if (reportFailures === 0) {
									matchFailed("\"+:\"");
								}
							}
							if (result0 !== null) {
								result0 = (function(offset) { return new L.AST.InfixOperator('+:'); })(pos0);
							}
							if (result0 === null) {
								pos = pos0;
							}
							if (result0 === null) {
								pos0 = pos;
								if (input.substr(pos, 2) === "-:") {
									result0 = "-:";
									pos += 2;
								} else {
									result0 = null;
									if (reportFailures === 0) {
										matchFailed("\"-:\"");
									}
								}
								if (result0 !== null) {
									result0 = (function(offset) { return new L.AST.InfixOperator('-:'); })(pos0);
								}
								if (result0 === null) {
									pos = pos0;
								}
								if (result0 === null) {
									pos0 = pos;
									if (input.substr(pos, 2) === "*:") {
										result0 = "*:";
										pos += 2;
									} else {
										result0 = null;
										if (reportFailures === 0) {
											matchFailed("\"*:\"");
										}
									}
									if (result0 !== null) {
										result0 = (function(offset) { return new L.AST.InfixOperator('*:'); })(pos0);
									}
									if (result0 === null) {
										pos = pos0;
									}
									if (result0 === null) {
										pos0 = pos;
										if (input.substr(pos, 2) === "%:") {
											result0 = "%:";
											pos += 2;
										} else {
											result0 = null;
											if (reportFailures === 0) {
												matchFailed("\"%:\"");
											}
										}
										if (result0 !== null) {
											result0 = (function(offset) { return new L.AST.InfixOperator('%:'); })(pos0);
										}
										if (result0 === null) {
											pos = pos0;
										}
										if (result0 === null) {
											pos0 = pos;
											if (input.substr(pos, 2) === "<=") {
												result0 = "<=";
												pos += 2;
											} else {
												result0 = null;
												if (reportFailures === 0) {
													matchFailed("\"<=\"");
												}
											}
											if (result0 !== null) {
												result0 = (function(offset) { return new L.AST.InfixOperator('<='); })(pos0);
											}
											if (result0 === null) {
												pos = pos0;
											}
											if (result0 === null) {
												pos0 = pos;
												if (input.substr(pos, 2) === "==") {
													result0 = "==";
													pos += 2;
												} else {
													result0 = null;
													if (reportFailures === 0) {
														matchFailed("\"==\"");
													}
												}
												if (result0 !== null) {
													result0 = (function(offset) { return new L.AST.InfixOperator('=='); })(pos0);
												}
												if (result0 === null) {
													pos = pos0;
												}
												if (result0 === null) {
													pos0 = pos;
													if (input.substr(pos, 2) === "!=") {
														result0 = "!=";
														pos += 2;
													} else {
														result0 = null;
														if (reportFailures === 0) {
															matchFailed("\"!=\"");
														}
													}
													if (result0 !== null) {
														result0 = (function(offset) { return new L.AST.InfixOperator('!='); })(pos0);
													}
													if (result0 === null) {
														pos = pos0;
													}
													if (result0 === null) {
														pos0 = pos;
														if (input.substr(pos, 2) === ">=") {
															result0 = ">=";
															pos += 2;
														} else {
															result0 = null;
															if (reportFailures === 0) {
																matchFailed("\">=\"");
															}
														}
														if (result0 !== null) {
															result0 = (function(offset) { return new L.AST.InfixOperator('>='); })(pos0);
														}
														if (result0 === null) {
															pos = pos0;
														}
														if (result0 === null) {
															pos0 = pos;
															if (input.substr(pos, 2) === "/\\") {
																result0 = "/\\";
																pos += 2;
															} else {
																result0 = null;
																if (reportFailures === 0) {
																	matchFailed("\"/\\\\\"");
																}
															}
															if (result0 !== null) {
																result0 = (function(offset) { return new L.AST.InfixOperator('/\\'); })(pos0);
															}
															if (result0 === null) {
																pos = pos0;
															}
															if (result0 === null) {
																pos0 = pos;
																if (input.substr(pos, 2) === "\\/") {
																	result0 = "\\/";
																	pos += 2;
																} else {
																	result0 = null;
																	if (reportFailures === 0) {
																		matchFailed("\"\\\\/\"");
																	}
																}
																if (result0 !== null) {
																	result0 = (function(offset) { return new L.AST.InfixOperator('\\/'); })(pos0);
																}
																if (result0 === null) {
																	pos = pos0;
																}
																if (result0 === null) {
																	pos0 = pos;
																	if (input.substr(pos, 2) === "<-") {
																		result0 = "<-";
																		pos += 2;
																	} else {
																		result0 = null;
																		if (reportFailures === 0) {
																			matchFailed("\"<-\"");
																		}
																	}
																	if (result0 !== null) {
																		result0 = (function(offset) { return new L.AST.InfixOperator('<-'); })(pos0);
																	}
																	if (result0 === null) {
																		pos = pos0;
																	}
																	if (result0 === null) {
																		pos0 = pos;
																		if (input.substr(pos, 2) === "..") {
																			result0 = "..";
																			pos += 2;
																		} else {
																			result0 = null;
																			if (reportFailures === 0) {
																				matchFailed("\"..\"");
																			}
																		}
																		if (result0 !== null) {
																			result0 = (function(offset) { return new L.AST.InfixOperator('..'); })(pos0);
																		}
																		if (result0 === null) {
																			pos = pos0;
																		}
																		if (result0 === null) {
																			pos0 = pos;
																			if (input.substr(pos, 2) === "~>") {
																				result0 = "~>";
																				pos += 2;
																			} else {
																				result0 = null;
																				if (reportFailures === 0) {
																					matchFailed("\"~>\"");
																				}
																			}
																			if (result0 !== null) {
																				result0 = (function(offset) { return new L.AST.InfixOperator('~>'); })(pos0);
																			}
																			if (result0 === null) {
																				pos = pos0;
																			}
																			if (result0 === null) {
																				pos0 = pos;
																				if (input.substr(pos, 2) === "<~") {
																					result0 = "<~";
																					pos += 2;
																				} else {
																					result0 = null;
																					if (reportFailures === 0) {
																						matchFailed("\"<~\"");
																					}
																				}
																				if (result0 !== null) {
																					result0 = (function(offset) { return new L.AST.InfixOperator('<~'); })(pos0);
																				}
																				if (result0 === null) {
																					pos = pos0;
																				}
																				if (result0 === null) {
																					pos0 = pos;
																					if (input.substr(pos, 2) === "??") {
																						result0 = "??";
																						pos += 2;
																					} else {
																						result0 = null;
																						if (reportFailures === 0) {
																							matchFailed("\"??\"");
																						}
																					}
																					if (result0 !== null) {
																						result0 = (function(offset) { return new L.AST.InfixOperator('??'); })(pos0);
																					}
																					if (result0 === null) {
																						pos = pos0;
																					}
																					if (result0 === null) {
																						pos0 = pos;
																						if (input.substr(pos, 2) === "::") {
																							result0 = "::";
																							pos += 2;
																						} else {
																							result0 = null;
																							if (reportFailures === 0) {
																								matchFailed("\"::\"");
																							}
																						}
																						if (result0 !== null) {
																							result0 = (function(offset) { return new L.AST.InfixOperator('::'); })(pos0);
																						}
																						if (result0 === null) {
																							pos = pos0;
																						}
																						if (result0 === null) {
																							pos0 = pos;
																							if (input.charCodeAt(pos) === 43) {
																								result0 = "+";
																								pos++;
																							} else {
																								result0 = null;
																								if (reportFailures === 0) {
																									matchFailed("\"+\"");
																								}
																							}
																							if (result0 !== null) {
																								result0 = (function(offset) { return new L.AST.InfixOperator('+'); })(pos0);
																							}
																							if (result0 === null) {
																								pos = pos0;
																							}
																							if (result0 === null) {
																								pos0 = pos;
																								if (input.charCodeAt(pos) === 45) {
																									result0 = "-";
																									pos++;
																								} else {
																									result0 = null;
																									if (reportFailures === 0) {
																										matchFailed("\"-\"");
																									}
																								}
																								if (result0 !== null) {
																									result0 = (function(offset) { return new L.AST.InfixOperator('-'); })(pos0);
																								}
																								if (result0 === null) {
																									pos = pos0;
																								}
																								if (result0 === null) {
																									pos0 = pos;
																									if (input.charCodeAt(pos) === 42) {
																										result0 = "*";
																										pos++;
																									} else {
																										result0 = null;
																										if (reportFailures === 0) {
																											matchFailed("\"*\"");
																										}
																									}
																									if (result0 !== null) {
																										result0 = (function(offset) { return new L.AST.InfixOperator('*'); })(pos0);
																									}
																									if (result0 === null) {
																										pos = pos0;
																									}
																									if (result0 === null) {
																										pos0 = pos;
																										if (input.charCodeAt(pos) === 47) {
																											result0 = "/";
																											pos++;
																										} else {
																											result0 = null;
																											if (reportFailures === 0) {
																												matchFailed("\"/\"");
																											}
																										}
																										if (result0 !== null) {
																											result0 = (function(offset) { return new L.AST.InfixOperator('/'); })(pos0);
																										}
																										if (result0 === null) {
																											pos = pos0;
																										}
																										if (result0 === null) {
																											pos0 = pos;
																											if (input.charCodeAt(pos) === 37) {
																												result0 = "%";
																												pos++;
																											} else {
																												result0 = null;
																												if (reportFailures === 0) {
																													matchFailed("\"%\"");
																												}
																											}
																											if (result0 !== null) {
																												result0 = (function(offset) { return new L.AST.InfixOperator('%'); })(pos0);
																											}
																											if (result0 === null) {
																												pos = pos0;
																											}
																											if (result0 === null) {
																												pos0 = pos;
																												if (input.charCodeAt(pos) === 60) {
																													result0 = "<";
																													pos++;
																												} else {
																													result0 = null;
																													if (reportFailures === 0) {
																														matchFailed("\"<\"");
																													}
																												}
																												if (result0 !== null) {
																													result0 = (function(offset) { return new L.AST.InfixOperator('<'); })(pos0);
																												}
																												if (result0 === null) {
																													pos = pos0;
																												}
																												if (result0 === null) {
																													pos0 = pos;
																													if (input.charCodeAt(pos) === 62) {
																														result0 = ">";
																														pos++;
																													} else {
																														result0 = null;
																														if (reportFailures === 0) {
																															matchFailed("\">\"");
																														}
																													}
																													if (result0 !== null) {
																														result0 = (function(offset) { return new L.AST.InfixOperator('>'); })(pos0);
																													}
																													if (result0 === null) {
																														pos = pos0;
																													}
																													if (result0 === null) {
																														pos0 = pos;
																														if (input.charCodeAt(pos) === 38) {
																															result0 = "&";
																															pos++;
																														} else {
																															result0 = null;
																															if (reportFailures === 0) {
																																matchFailed("\"&\"");
																															}
																														}
																														if (result0 !== null) {
																															result0 = (function(offset) { return new L.AST.InfixOperator('&'); })(pos0);
																														}
																														if (result0 === null) {
																															pos = pos0;
																														}
																														if (result0 === null) {
																															pos0 = pos;
																															if (input.charCodeAt(pos) === 124) {
																																result0 = "|";
																																pos++;
																															} else {
																																result0 = null;
																																if (reportFailures === 0) {
																																	matchFailed("\"|\"");
																																}
																															}
																															if (result0 !== null) {
																																result0 = (function(offset) { return new L.AST.InfixOperator('|'); })(pos0);
																															}
																															if (result0 === null) {
																																pos = pos0;
																															}
																															if (result0 === null) {
																																pos0 = pos;
																																if (input.charCodeAt(pos) === 94) {
																																	result0 = "^";
																																	pos++;
																																} else {
																																	result0 = null;
																																	if (reportFailures === 0) {
																																		matchFailed("\"^\"");
																																	}
																																}
																																if (result0 !== null) {
																																	result0 = (function(offset) { return new L.AST.InfixOperator('^'); })(pos0);
																																}
																																if (result0 === null) {
																																	pos = pos0;
																																}
																															}
																														}
																													}
																												}
																											}
																										}
																									}
																								}
																							}
																						}
																					}
																				}
																			}
																		}
																	}
																}
															}
														}
													}
												}
											}
										}
									}
								}
							}
						}
					}
				}
				return result0;
			}
			
			function parse_prefixOperator() {
				var result0;
				var pos0;
				
				pos0 = pos;
				if (input.charCodeAt(pos) === 43) {
					result0 = "+";
					pos++;
				} else {
					result0 = null;
					if (reportFailures === 0) {
						matchFailed("\"+\"");
					}
				}
				if (result0 !== null) {
					result0 = (function(offset) { return new L.AST.PrefixOperator('+'); })(pos0);
				}
				if (result0 === null) {
					pos = pos0;
				}
				if (result0 === null) {
					pos0 = pos;
					if (input.charCodeAt(pos) === 45) {
						result0 = "-";
						pos++;
					} else {
						result0 = null;
						if (reportFailures === 0) {
							matchFailed("\"-\"");
						}
					}
					if (result0 !== null) {
						result0 = (function(offset) { return new L.AST.PrefixOperator('-'); })(pos0);
					}
					if (result0 === null) {
						pos = pos0;
					}
					if (result0 === null) {
						pos0 = pos;
						if (input.charCodeAt(pos) === 126) {
							result0 = "~";
							pos++;
						} else {
							result0 = null;
							if (reportFailures === 0) {
								matchFailed("\"~\"");
							}
						}
						if (result0 !== null) {
							result0 = (function(offset) { return new L.AST.PrefixOperator('~'); })(pos0);
						}
						if (result0 === null) {
							pos = pos0;
						}
						if (result0 === null) {
							pos0 = pos;
							if (input.charCodeAt(pos) === 33) {
								result0 = "!";
								pos++;
							} else {
								result0 = null;
								if (reportFailures === 0) {
									matchFailed("\"!\"");
								}
							}
							if (result0 !== null) {
								result0 = (function(offset) { return new L.AST.PrefixOperator('!'); })(pos0);
							}
							if (result0 === null) {
								pos = pos0;
							}
							if (result0 === null) {
								pos0 = pos;
								if (input.charCodeAt(pos) === 94) {
									result0 = "^";
									pos++;
								} else {
									result0 = null;
									if (reportFailures === 0) {
										matchFailed("\"^\"");
									}
								}
								if (result0 !== null) {
									result0 = (function(offset) { return new L.AST.PrefixOperator('^'); })(pos0);
								}
								if (result0 === null) {
									pos = pos0;
								}
								if (result0 === null) {
									pos0 = pos;
									if (input.charCodeAt(pos) === 92) {
										result0 = "\\";
										pos++;
									} else {
										result0 = null;
										if (reportFailures === 0) {
											matchFailed("\"\\\\\"");
										}
									}
									if (result0 !== null) {
										result0 = (function(offset) { return new L.AST.PrefixOperator('\\'); })(pos0);
									}
									if (result0 === null) {
										pos = pos0;
									}
								}
							}
						}
					}
				}
				return result0;
			}
			
			function parse_function() {
				var result0, result1, result2, result3, result4;
				var pos0, pos1;
				
				pos0 = pos;
				pos1 = pos;
				result0 = parse_identifierList();
				if (result0 !== null) {
					result1 = parse__();
					if (result1 !== null) {
						if (input.substr(pos, 2) === "->") {
							result2 = "->";
							pos += 2;
						} else {
							result2 = null;
							if (reportFailures === 0) {
								matchFailed("\"->\"");
							}
						}
						if (result2 !== null) {
							result3 = parse__();
							if (result3 !== null) {
								result4 = parse_block();
								if (result4 !== null) {
									result0 = [result0, result1, result2, result3, result4];
								} else {
									result0 = null;
									pos = pos1;
								}
							} else {
								result0 = null;
								pos = pos1;
							}
						} else {
							result0 = null;
							pos = pos1;
						}
					} else {
						result0 = null;
						pos = pos1;
					}
				} else {
					result0 = null;
					pos = pos1;
				}
				if (result0 !== null) {
					result0 = (function(offset, il, b) { return new L.AST.Function(il, b, {type: 'thin'}); })(pos0, result0[0], result0[4]);
				}
				if (result0 === null) {
					pos = pos0;
				}
				if (result0 === null) {
					pos0 = pos;
					pos1 = pos;
					result0 = parse_identifierList();
					if (result0 !== null) {
						result1 = parse__();
						if (result1 !== null) {
							if (input.substr(pos, 2) === "=>") {
								result2 = "=>";
								pos += 2;
							} else {
								result2 = null;
								if (reportFailures === 0) {
									matchFailed("\"=>\"");
								}
							}
							if (result2 !== null) {
								result3 = parse__();
								if (result3 !== null) {
									result4 = parse_block();
									if (result4 !== null) {
										result0 = [result0, result1, result2, result3, result4];
									} else {
										result0 = null;
										pos = pos1;
									}
								} else {
									result0 = null;
									pos = pos1;
								}
							} else {
								result0 = null;
								pos = pos1;
							}
						} else {
							result0 = null;
							pos = pos1;
						}
					} else {
						result0 = null;
						pos = pos1;
					}
					if (result0 !== null) {
						result0 = (function(offset, il, b) { return new L.AST.Function(il, b, {type: 'fat'}); })(pos0, result0[0], result0[4]);
					}
					if (result0 === null) {
						pos = pos0;
					}
				}
				return result0;
			}
			
			function parse_block() {
				var result0, result1, result2, result3;
				var pos0, pos1;
				
				pos0 = pos;
				pos1 = pos;
				if (input.charCodeAt(pos) === 123) {
					result0 = "{";
					pos++;
				} else {
					result0 = null;
					if (reportFailures === 0) {
						matchFailed("\"{\"");
					}
				}
				if (result0 !== null) {
					result1 = parse___();
					if (result1 !== null) {
						result2 = parse_expressionList();
						result2 = result2 !== null ? result2 : "";
						if (result2 !== null) {
							if (input.charCodeAt(pos) === 125) {
								result3 = "}";
								pos++;
							} else {
								result3 = null;
								if (reportFailures === 0) {
									matchFailed("\"}\"");
								}
							}
							if (result3 !== null) {
								result0 = [result0, result1, result2, result3];
							} else {
								result0 = null;
								pos = pos1;
							}
						} else {
							result0 = null;
							pos = pos1;
						}
					} else {
						result0 = null;
						pos = pos1;
					}
				} else {
					result0 = null;
					pos = pos1;
				}
				if (result0 !== null) {
					result0 = (function(offset, exps) { 
							var list;
							
							if (exps && exps.type === 'ExpressionList') {
								list = exps.list;
							} else if (exps) {
								list = [exps];
							} else {
								list = [];
							}
							
							return new L.AST.Block(list);
						})(pos0, result0[2]);
				}
				if (result0 === null) {
					pos = pos0;
				}
				return result0;
			}
			
			function parse_identifierList() {
				var result0, result1, result2, result3, result4, result5, result6;
				var pos0, pos1, pos2, pos3, pos4, pos5;
				
				pos0 = pos;
				pos1 = pos;
				if (input.charCodeAt(pos) === 40) {
					result0 = "(";
					pos++;
				} else {
					result0 = null;
					if (reportFailures === 0) {
						matchFailed("\"(\"");
					}
				}
				if (result0 !== null) {
					result1 = parse__();
					if (result1 !== null) {
						pos2 = pos;
						pos3 = pos;
						result2 = parse_identifier();
						if (result2 !== null) {
							result3 = [];
							pos4 = pos;
							pos5 = pos;
							result4 = parse_$();
							if (result4 !== null) {
								result5 = parse__();
								if (result5 !== null) {
									result6 = parse_identifier();
									if (result6 !== null) {
										result4 = [result4, result5, result6];
									} else {
										result4 = null;
										pos = pos5;
									}
								} else {
									result4 = null;
									pos = pos5;
								}
							} else {
								result4 = null;
								pos = pos5;
							}
							if (result4 !== null) {
								result4 = (function(offset, id) { return id; })(pos4, result4[2]);
							}
							if (result4 === null) {
								pos = pos4;
							}
							while (result4 !== null) {
								result3.push(result4);
								pos4 = pos;
								pos5 = pos;
								result4 = parse_$();
								if (result4 !== null) {
									result5 = parse__();
									if (result5 !== null) {
										result6 = parse_identifier();
										if (result6 !== null) {
											result4 = [result4, result5, result6];
										} else {
											result4 = null;
											pos = pos5;
										}
									} else {
										result4 = null;
										pos = pos5;
									}
								} else {
									result4 = null;
									pos = pos5;
								}
								if (result4 !== null) {
									result4 = (function(offset, id) { return id; })(pos4, result4[2]);
								}
								if (result4 === null) {
									pos = pos4;
								}
							}
							if (result3 !== null) {
								result4 = parse_$();
								result4 = result4 !== null ? result4 : "";
								if (result4 !== null) {
									result2 = [result2, result3, result4];
								} else {
									result2 = null;
									pos = pos3;
								}
							} else {
								result2 = null;
								pos = pos3;
							}
						} else {
							result2 = null;
							pos = pos3;
						}
						if (result2 !== null) {
							result2 = (function(offset, first, rest) {
									return new L.AST.List([first].concat(rest), {source: 'identifierList'});
								})(pos2, result2[0], result2[1]);
						}
						if (result2 === null) {
							pos = pos2;
						}
						result2 = result2 !== null ? result2 : "";
						if (result2 !== null) {
							result3 = parse__();
							if (result3 !== null) {
								if (input.charCodeAt(pos) === 41) {
									result4 = ")";
									pos++;
								} else {
									result4 = null;
									if (reportFailures === 0) {
										matchFailed("\")\"");
									}
								}
								if (result4 !== null) {
									result0 = [result0, result1, result2, result3, result4];
								} else {
									result0 = null;
									pos = pos1;
								}
							} else {
								result0 = null;
								pos = pos1;
							}
						} else {
							result0 = null;
							pos = pos1;
						}
					} else {
						result0 = null;
						pos = pos1;
					}
				} else {
					result0 = null;
					pos = pos1;
				}
				if (result0 !== null) {
					result0 = (function(offset, idl) {
							return idl || new L.AST.List([], {source: 'identifierList'});
						})(pos0, result0[2]);
				}
				if (result0 === null) {
					pos = pos0;
				}
				return result0;
			}
			
			function parse_list() {
				var result0, result1, result2, result3, result4;
				var pos0, pos1;
				
				pos0 = pos;
				pos1 = pos;
				if (input.charCodeAt(pos) === 91) {
					result0 = "[";
					pos++;
				} else {
					result0 = null;
					if (reportFailures === 0) {
						matchFailed("\"[\"");
					}
				}
				if (result0 !== null) {
					result1 = parse___();
					if (result1 !== null) {
						result2 = parse_pureExpressionList();
						result2 = result2 !== null ? result2 : "";
						if (result2 !== null) {
							result3 = parse___();
							if (result3 !== null) {
								if (input.charCodeAt(pos) === 93) {
									result4 = "]";
									pos++;
								} else {
									result4 = null;
									if (reportFailures === 0) {
										matchFailed("\"]\"");
									}
								}
								if (result4 !== null) {
									result0 = [result0, result1, result2, result3, result4];
								} else {
									result0 = null;
									pos = pos1;
								}
							} else {
								result0 = null;
								pos = pos1;
							}
						} else {
							result0 = null;
							pos = pos1;
						}
					} else {
						result0 = null;
						pos = pos1;
					}
				} else {
					result0 = null;
					pos = pos1;
				}
				if (result0 !== null) {
					result0 = (function(offset, el) {
							if (!el) {
								return new L.AST.List([], {source: 'list'});
							} else if (el.type === 'ExpressionList') {
								// Expression lists are actually just expressions if there's just one
								return new L.AST.List(el.list, {source: 'list'});
							} else {
								return new L.AST.List([el], {source: 'list'});
							}
						})(pos0, result0[2]);
				}
				if (result0 === null) {
					pos = pos0;
				}
				return result0;
			}
			
			function parse_dictionary() {
				var result0, result1, result2, result3, result4;
				var pos0, pos1;
				
				pos0 = pos;
				pos1 = pos;
				if (input.charCodeAt(pos) === 91) {
					result0 = "[";
					pos++;
				} else {
					result0 = null;
					if (reportFailures === 0) {
						matchFailed("\"[\"");
					}
				}
				if (result0 !== null) {
					result1 = parse___();
					if (result1 !== null) {
						result2 = parse_keyValueList();
						result2 = result2 !== null ? result2 : "";
						if (result2 !== null) {
							result3 = parse___();
							if (result3 !== null) {
								if (input.charCodeAt(pos) === 93) {
									result4 = "]";
									pos++;
								} else {
									result4 = null;
									if (reportFailures === 0) {
										matchFailed("\"]\"");
									}
								}
								if (result4 !== null) {
									result0 = [result0, result1, result2, result3, result4];
								} else {
									result0 = null;
									pos = pos1;
								}
							} else {
								result0 = null;
								pos = pos1;
							}
						} else {
							result0 = null;
							pos = pos1;
						}
					} else {
						result0 = null;
						pos = pos1;
					}
				} else {
					result0 = null;
					pos = pos1;
				}
				if (result0 !== null) {
					result0 = (function(offset, kvl) { 
								return kvl || new L.AST.Dictionary([]);
							})(pos0, result0[2]);
				}
				if (result0 === null) {
					pos = pos0;
				}
				return result0;
			}
			
			function parse_keyValueList() {
				var result0, result1, result2, result3, result4;
				var pos0, pos1, pos2, pos3;
				
				pos0 = pos;
				pos1 = pos;
				result0 = parse_keyValuePair();
				if (result0 !== null) {
					result1 = [];
					pos2 = pos;
					pos3 = pos;
					result2 = parse_$();
					if (result2 !== null) {
						result3 = parse__();
						if (result3 !== null) {
							result4 = parse_keyValuePair();
							if (result4 !== null) {
								result2 = [result2, result3, result4];
							} else {
								result2 = null;
								pos = pos3;
							}
						} else {
							result2 = null;
							pos = pos3;
						}
					} else {
						result2 = null;
						pos = pos3;
					}
					if (result2 !== null) {
						result2 = (function(offset, kvp) { return kvp; })(pos2, result2[2]);
					}
					if (result2 === null) {
						pos = pos2;
					}
					while (result2 !== null) {
						result1.push(result2);
						pos2 = pos;
						pos3 = pos;
						result2 = parse_$();
						if (result2 !== null) {
							result3 = parse__();
							if (result3 !== null) {
								result4 = parse_keyValuePair();
								if (result4 !== null) {
									result2 = [result2, result3, result4];
								} else {
									result2 = null;
									pos = pos3;
								}
							} else {
								result2 = null;
								pos = pos3;
							}
						} else {
							result2 = null;
							pos = pos3;
						}
						if (result2 !== null) {
							result2 = (function(offset, kvp) { return kvp; })(pos2, result2[2]);
						}
						if (result2 === null) {
							pos = pos2;
						}
					}
					if (result1 !== null) {
						result2 = parse_$();
						result2 = result2 !== null ? result2 : "";
						if (result2 !== null) {
							result3 = parse__();
							if (result3 !== null) {
								result0 = [result0, result1, result2, result3];
							} else {
								result0 = null;
								pos = pos1;
							}
						} else {
							result0 = null;
							pos = pos1;
						}
					} else {
						result0 = null;
						pos = pos1;
					}
				} else {
					result0 = null;
					pos = pos1;
				}
				if (result0 !== null) {
					result0 = (function(offset, first, rest) {
							return new L.AST.Dictionary([first].concat(rest));
						})(pos0, result0[0], result0[1]);
				}
				if (result0 === null) {
					pos = pos0;
				}
				return result0;
			}
			
			function parse_keyValuePair() {
				var result0, result1, result2, result3, result4;
				var pos0, pos1;
				
				pos0 = pos;
				pos1 = pos;
				result0 = parse_pureExpression();
				if (result0 !== null) {
					result1 = parse__();
					if (result1 !== null) {
						if (input.charCodeAt(pos) === 58) {
							result2 = ":";
							pos++;
						} else {
							result2 = null;
							if (reportFailures === 0) {
								matchFailed("\":\"");
							}
						}
						if (result2 !== null) {
							result3 = parse__();
							if (result3 !== null) {
								result4 = parse_pureExpression();
								if (result4 !== null) {
									result0 = [result0, result1, result2, result3, result4];
								} else {
									result0 = null;
									pos = pos1;
								}
							} else {
								result0 = null;
								pos = pos1;
							}
						} else {
							result0 = null;
							pos = pos1;
						}
					} else {
						result0 = null;
						pos = pos1;
					}
				} else {
					result0 = null;
					pos = pos1;
				}
				if (result0 !== null) {
					result0 = (function(offset, key, val) {
							return new L.AST.KeyValuePair(key, val);
						})(pos0, result0[0], result0[4]);
				}
				if (result0 === null) {
					pos = pos0;
				}
				return result0;
			}
			
			function parse_identifier() {
				var result0, result1;
				var pos0, pos1;
				
				pos0 = pos;
				pos1 = pos;
				result0 = parse_name();
				if (result0 !== null) {
					result1 = parse_postfixModifier();
					result1 = result1 !== null ? result1 : "";
					if (result1 !== null) {
						result0 = [result0, result1];
					} else {
						result0 = null;
						pos = pos1;
					}
				} else {
					result0 = null;
					pos = pos1;
				}
				if (result0 !== null) {
					result0 = (function(offset, n, mod) {
							n.tags['modifier'] = mod || null;
							return n;
						})(pos0, result0[0], result0[1]);
				}
				if (result0 === null) {
					pos = pos0;
				}
				return result0;
			}
			
			function parse_name() {
				var result0, result1, result2;
				var pos0, pos1;
				
				pos0 = pos;
				pos1 = pos;
				if (/^[a-zA-Z_]/.test(input.charAt(pos))) {
					result0 = input.charAt(pos);
					pos++;
				} else {
					result0 = null;
					if (reportFailures === 0) {
						matchFailed("[a-zA-Z_]");
					}
				}
				if (result0 !== null) {
					result1 = [];
					if (/^[a-zA-Z0-9_\-]/.test(input.charAt(pos))) {
						result2 = input.charAt(pos);
						pos++;
					} else {
						result2 = null;
						if (reportFailures === 0) {
							matchFailed("[a-zA-Z0-9_\\-]");
						}
					}
					while (result2 !== null) {
						result1.push(result2);
						if (/^[a-zA-Z0-9_\-]/.test(input.charAt(pos))) {
							result2 = input.charAt(pos);
							pos++;
						} else {
							result2 = null;
							if (reportFailures === 0) {
								matchFailed("[a-zA-Z0-9_\\-]");
							}
						}
					}
					if (result1 !== null) {
						result0 = [result0, result1];
					} else {
						result0 = null;
						pos = pos1;
					}
				} else {
					result0 = null;
					pos = pos1;
				}
				if (result0 !== null) {
					result0 = (function(offset, first, rest) {
							return new L.AST.Identifier(first + rest.join(''));
						})(pos0, result0[0], result0[1]);
				}
				if (result0 === null) {
					pos = pos0;
				}
				return result0;
			}
			
			function parse_postfixModifier() {
				var result0;
				var pos0;
				
				pos0 = pos;
				if (input.charCodeAt(pos) === 63) {
					result0 = "?";
					pos++;
				} else {
					result0 = null;
					if (reportFailures === 0) {
						matchFailed("\"?\"");
					}
				}
				if (result0 !== null) {
					result0 = (function(offset) { return '?'; })(pos0);
				}
				if (result0 === null) {
					pos = pos0;
				}
				if (result0 === null) {
					pos0 = pos;
					if (input.charCodeAt(pos) === 33) {
						result0 = "!";
						pos++;
					} else {
						result0 = null;
						if (reportFailures === 0) {
							matchFailed("\"!\"");
						}
					}
					if (result0 !== null) {
						result0 = (function(offset) { return '!'; })(pos0);
					}
					if (result0 === null) {
						pos = pos0;
					}
				}
				return result0;
			}
			
			function parse_string() {
				var result0, result1, result2;
				var pos0, pos1;
				
				pos0 = pos;
				pos1 = pos;
				if (input.charCodeAt(pos) === 34) {
					result0 = "\"";
					pos++;
				} else {
					result0 = null;
					if (reportFailures === 0) {
						matchFailed("\"\\\"\"");
					}
				}
				if (result0 !== null) {
					result1 = [];
					result2 = parse_escapedChar();
					if (result2 === null) {
						if (/^[^"]/.test(input.charAt(pos))) {
							result2 = input.charAt(pos);
							pos++;
						} else {
							result2 = null;
							if (reportFailures === 0) {
								matchFailed("[^\"]");
							}
						}
					}
					while (result2 !== null) {
						result1.push(result2);
						result2 = parse_escapedChar();
						if (result2 === null) {
							if (/^[^"]/.test(input.charAt(pos))) {
								result2 = input.charAt(pos);
								pos++;
							} else {
								result2 = null;
								if (reportFailures === 0) {
									matchFailed("[^\"]");
								}
							}
						}
					}
					if (result1 !== null) {
						if (input.charCodeAt(pos) === 34) {
							result2 = "\"";
							pos++;
						} else {
							result2 = null;
							if (reportFailures === 0) {
								matchFailed("\"\\\"\"");
							}
						}
						if (result2 !== null) {
							result0 = [result0, result1, result2];
						} else {
							result0 = null;
							pos = pos1;
						}
					} else {
						result0 = null;
						pos = pos1;
					}
				} else {
					result0 = null;
					pos = pos1;
				}
				if (result0 !== null) {
					result0 = (function(offset, str) { return new L.AST.String(str.join('')); })(pos0, result0[1]);
				}
				if (result0 === null) {
					pos = pos0;
				}
				if (result0 === null) {
					pos0 = pos;
					pos1 = pos;
					if (input.charCodeAt(pos) === 39) {
						result0 = "'";
						pos++;
					} else {
						result0 = null;
						if (reportFailures === 0) {
							matchFailed("\"'\"");
						}
					}
					if (result0 !== null) {
						result1 = [];
						result2 = parse_escapedChar();
						if (result2 === null) {
							if (/^[^']/.test(input.charAt(pos))) {
								result2 = input.charAt(pos);
								pos++;
							} else {
								result2 = null;
								if (reportFailures === 0) {
									matchFailed("[^']");
								}
							}
						}
						while (result2 !== null) {
							result1.push(result2);
							result2 = parse_escapedChar();
							if (result2 === null) {
								if (/^[^']/.test(input.charAt(pos))) {
									result2 = input.charAt(pos);
									pos++;
								} else {
									result2 = null;
									if (reportFailures === 0) {
										matchFailed("[^']");
									}
								}
							}
						}
						if (result1 !== null) {
							if (input.charCodeAt(pos) === 39) {
								result2 = "'";
								pos++;
							} else {
								result2 = null;
								if (reportFailures === 0) {
									matchFailed("\"'\"");
								}
							}
							if (result2 !== null) {
								result0 = [result0, result1, result2];
							} else {
								result0 = null;
								pos = pos1;
							}
						} else {
							result0 = null;
							pos = pos1;
						}
					} else {
						result0 = null;
						pos = pos1;
					}
					if (result0 !== null) {
						result0 = (function(offset, str) { return new L.AST.String(str.join('')); })(pos0, result0[1]);
					}
					if (result0 === null) {
						pos = pos0;
					}
				}
				return result0;
			}
			
			function parse_escapedChar() {
				var result0, result1;
				var pos0, pos1;
				
				pos0 = pos;
				pos1 = pos;
				if (input.charCodeAt(pos) === 92) {
					result0 = "\\";
					pos++;
				} else {
					result0 = null;
					if (reportFailures === 0) {
						matchFailed("\"\\\\\"");
					}
				}
				if (result0 !== null) {
					if (/^[ntb"'\\]/.test(input.charAt(pos))) {
						result1 = input.charAt(pos);
						pos++;
					} else {
						result1 = null;
						if (reportFailures === 0) {
							matchFailed("[ntb\"'\\\\]");
						}
					}
					if (result1 !== null) {
						result0 = [result0, result1];
					} else {
						result0 = null;
						pos = pos1;
					}
				} else {
					result0 = null;
					pos = pos1;
				}
				if (result0 !== null) {
					result0 = (function(offset, char) {
							return ({'"': '"', "'": "'", n: '\n', t: '\t', '\\': '\\'})[char];
						})(pos0, result0[1]);
				}
				if (result0 === null) {
					pos = pos0;
				}
				return result0;
			}
			
			function parse_number() {
				var result0;
				
				result0 = parse_imaginary();
				if (result0 === null) {
					result0 = parse_scientific();
					if (result0 === null) {
						result0 = parse_hex();
						if (result0 === null) {
							result0 = parse_decimal();
							if (result0 === null) {
								result0 = parse_integer();
							}
						}
					}
				}
				return result0;
			}
			
			function parse_integer() {
				var result0, result1, result2;
				var pos0, pos1;
				
				pos0 = pos;
				if (input.charCodeAt(pos) === 48) {
					result0 = "0";
					pos++;
				} else {
					result0 = null;
					if (reportFailures === 0) {
						matchFailed("\"0\"");
					}
				}
				if (result0 !== null) {
					result0 = (function(offset) { return new L.AST.Integer(0, {'source_base': 10}); })(pos0);
				}
				if (result0 === null) {
					pos = pos0;
				}
				if (result0 === null) {
					pos0 = pos;
					pos1 = pos;
					if (/^[1-9]/.test(input.charAt(pos))) {
						result0 = input.charAt(pos);
						pos++;
					} else {
						result0 = null;
						if (reportFailures === 0) {
							matchFailed("[1-9]");
						}
					}
					if (result0 !== null) {
						result1 = [];
						if (/^[0-9]/.test(input.charAt(pos))) {
							result2 = input.charAt(pos);
							pos++;
						} else {
							result2 = null;
							if (reportFailures === 0) {
								matchFailed("[0-9]");
							}
						}
						while (result2 !== null) {
							result1.push(result2);
							if (/^[0-9]/.test(input.charAt(pos))) {
								result2 = input.charAt(pos);
								pos++;
							} else {
								result2 = null;
								if (reportFailures === 0) {
									matchFailed("[0-9]");
								}
							}
						}
						if (result1 !== null) {
							result0 = [result0, result1];
						} else {
							result0 = null;
							pos = pos1;
						}
					} else {
						result0 = null;
						pos = pos1;
					}
					if (result0 !== null) {
						result0 = (function(offset, first, rest) {
								var val = parseInt(first + rest.join(''), 10);
								return new L.AST.Integer(val, {'source_base': 10});
							})(pos0, result0[0], result0[1]);
					}
					if (result0 === null) {
						pos = pos0;
					}
				}
				return result0;
			}
			
			function parse_decimal() {
				var result0, result1, result2, result3;
				var pos0, pos1;
				
				pos0 = pos;
				pos1 = pos;
				result0 = parse_integer();
				if (result0 !== null) {
					if (input.charCodeAt(pos) === 46) {
						result1 = ".";
						pos++;
					} else {
						result1 = null;
						if (reportFailures === 0) {
							matchFailed("\".\"");
						}
					}
					if (result1 !== null) {
						result2 = [];
						if (/^[0-9]/.test(input.charAt(pos))) {
							result3 = input.charAt(pos);
							pos++;
						} else {
							result3 = null;
							if (reportFailures === 0) {
								matchFailed("[0-9]");
							}
						}
						while (result3 !== null) {
							result2.push(result3);
							if (/^[0-9]/.test(input.charAt(pos))) {
								result3 = input.charAt(pos);
								pos++;
							} else {
								result3 = null;
								if (reportFailures === 0) {
									matchFailed("[0-9]");
								}
							}
						}
						if (result2 !== null) {
							result0 = [result0, result1, result2];
						} else {
							result0 = null;
							pos = pos1;
						}
					} else {
						result0 = null;
						pos = pos1;
					}
				} else {
					result0 = null;
					pos = pos1;
				}
				if (result0 !== null) {
					result0 = (function(offset, int, digits) {
							var fraction = parseInt(digits.join(''), 10) || 0;
							var factor = Math.pow(10, digits.length);
							return new L.AST.Decimal(int.value * factor + fraction, digits.length);
						})(pos0, result0[0], result0[2]);
				}
				if (result0 === null) {
					pos = pos0;
				}
				return result0;
			}
			
			function parse_scientific() {
				var result0, result1, result2, result3;
				var pos0, pos1;
				
				pos0 = pos;
				pos1 = pos;
				result0 = parse_integer();
				if (result0 !== null) {
					if (/^[eE]/.test(input.charAt(pos))) {
						result1 = input.charAt(pos);
						pos++;
					} else {
						result1 = null;
						if (reportFailures === 0) {
							matchFailed("[eE]");
						}
					}
					if (result1 !== null) {
						if (/^[+\-]/.test(input.charAt(pos))) {
							result2 = input.charAt(pos);
							pos++;
						} else {
							result2 = null;
							if (reportFailures === 0) {
								matchFailed("[+\\-]");
							}
						}
						result2 = result2 !== null ? result2 : "";
						if (result2 !== null) {
							result3 = parse_integer();
							if (result3 !== null) {
								result0 = [result0, result1, result2, result3];
							} else {
								result0 = null;
								pos = pos1;
							}
						} else {
							result0 = null;
							pos = pos1;
						}
					} else {
						result0 = null;
						pos = pos1;
					}
				} else {
					result0 = null;
					pos = pos1;
				}
				if (result0 !== null) {
					result0 = (function(offset, sig, mant) {
							return new L.AST.Scientific(sig.value, mant.value);
						})(pos0, result0[0], result0[3]);
				}
				if (result0 === null) {
					pos = pos0;
				}
				if (result0 === null) {
					pos0 = pos;
					pos1 = pos;
					result0 = parse_decimal();
					if (result0 !== null) {
						if (/^[eE]/.test(input.charAt(pos))) {
							result1 = input.charAt(pos);
							pos++;
						} else {
							result1 = null;
							if (reportFailures === 0) {
								matchFailed("[eE]");
							}
						}
						if (result1 !== null) {
							if (/^[+\-]/.test(input.charAt(pos))) {
								result2 = input.charAt(pos);
								pos++;
							} else {
								result2 = null;
								if (reportFailures === 0) {
									matchFailed("[+\\-]");
								}
							}
							result2 = result2 !== null ? result2 : "";
							if (result2 !== null) {
								result3 = parse_integer();
								if (result3 !== null) {
									result0 = [result0, result1, result2, result3];
								} else {
									result0 = null;
									pos = pos1;
								}
							} else {
								result0 = null;
								pos = pos1;
							}
						} else {
							result0 = null;
							pos = pos1;
						}
					} else {
						result0 = null;
						pos = pos1;
					}
					if (result0 !== null) {
						result0 = (function(offset, sig, mant) {
								return new L.AST.Scientific(sig.value, mant.value);
							})(pos0, result0[0], result0[3]);
					}
					if (result0 === null) {
						pos = pos0;
					}
				}
				return result0;
			}
			
			function parse_hex() {
				var result0, result1, result2, result3;
				var pos0, pos1;
				
				pos0 = pos;
				if (input.substr(pos, 3) === "0x0") {
					result0 = "0x0";
					pos += 3;
				} else {
					result0 = null;
					if (reportFailures === 0) {
						matchFailed("\"0x0\"");
					}
				}
				if (result0 !== null) {
					result0 = (function(offset) { return new L.AST.Integer(0, {'source_base': 16}); })(pos0);
				}
				if (result0 === null) {
					pos = pos0;
				}
				if (result0 === null) {
					pos0 = pos;
					pos1 = pos;
					if (input.substr(pos, 2) === "0x") {
						result0 = "0x";
						pos += 2;
					} else {
						result0 = null;
						if (reportFailures === 0) {
							matchFailed("\"0x\"");
						}
					}
					if (result0 !== null) {
						if (/^[1-9a-fA-F]/.test(input.charAt(pos))) {
							result1 = input.charAt(pos);
							pos++;
						} else {
							result1 = null;
							if (reportFailures === 0) {
								matchFailed("[1-9a-fA-F]");
							}
						}
						if (result1 !== null) {
							result2 = [];
							if (/^[0-9a-fA-F]/.test(input.charAt(pos))) {
								result3 = input.charAt(pos);
								pos++;
							} else {
								result3 = null;
								if (reportFailures === 0) {
									matchFailed("[0-9a-fA-F]");
								}
							}
							while (result3 !== null) {
								result2.push(result3);
								if (/^[0-9a-fA-F]/.test(input.charAt(pos))) {
									result3 = input.charAt(pos);
									pos++;
								} else {
									result3 = null;
									if (reportFailures === 0) {
										matchFailed("[0-9a-fA-F]");
									}
								}
							}
							if (result2 !== null) {
								result0 = [result0, result1, result2];
							} else {
								result0 = null;
								pos = pos1;
							}
						} else {
							result0 = null;
							pos = pos1;
						}
					} else {
						result0 = null;
						pos = pos1;
					}
					if (result0 !== null) {
						result0 = (function(offset, first, rest) {
								var val = parseInt(first + rest.join(''), 16);
								return new L.AST.Integer(val, {'source_base': 16});
							})(pos0, result0[1], result0[2]);
					}
					if (result0 === null) {
						pos = pos0;
					}
				}
				return result0;
			}
			
			function parse_imaginary() {
				var result0, result1;
				var pos0, pos1;
				
				pos0 = pos;
				pos1 = pos;
				result0 = parse_scientific();
				if (result0 === null) {
					result0 = parse_hex();
					if (result0 === null) {
						result0 = parse_decimal();
						if (result0 === null) {
							result0 = parse_integer();
						}
					}
				}
				if (result0 !== null) {
					if (/^[ijJ]/.test(input.charAt(pos))) {
						result1 = input.charAt(pos);
						pos++;
					} else {
						result1 = null;
						if (reportFailures === 0) {
							matchFailed("[ijJ]");
						}
					}
					if (result1 !== null) {
						result0 = [result0, result1];
					} else {
						result0 = null;
						pos = pos1;
					}
				} else {
					result0 = null;
					pos = pos1;
				}
				if (result0 !== null) {
					result0 = (function(offset, num) { return new L.AST.Imaginary(num); })(pos0, result0[0]);
				}
				if (result0 === null) {
					pos = pos0;
				}
				return result0;
			}
			
			function parse__() {
				var result0, result1;
				
				result0 = [];
				if (input.charCodeAt(pos) === 32) {
					result1 = " ";
					pos++;
				} else {
					result1 = null;
					if (reportFailures === 0) {
						matchFailed("\" \"");
					}
				}
				if (result1 === null) {
					if (input.charCodeAt(pos) === 9) {
						result1 = "\t";
						pos++;
					} else {
						result1 = null;
						if (reportFailures === 0) {
							matchFailed("\"\\t\"");
						}
					}
				}
				while (result1 !== null) {
					result0.push(result1);
					if (input.charCodeAt(pos) === 32) {
						result1 = " ";
						pos++;
					} else {
						result1 = null;
						if (reportFailures === 0) {
							matchFailed("\" \"");
						}
					}
					if (result1 === null) {
						if (input.charCodeAt(pos) === 9) {
							result1 = "\t";
							pos++;
						} else {
							result1 = null;
							if (reportFailures === 0) {
								matchFailed("\"\\t\"");
							}
						}
					}
				}
				return result0;
			}
			
			function parse___() {
				var result0, result1;
				
				result0 = [];
				if (input.charCodeAt(pos) === 32) {
					result1 = " ";
					pos++;
				} else {
					result1 = null;
					if (reportFailures === 0) {
						matchFailed("\" \"");
					}
				}
				if (result1 === null) {
					if (input.charCodeAt(pos) === 9) {
						result1 = "\t";
						pos++;
					} else {
						result1 = null;
						if (reportFailures === 0) {
							matchFailed("\"\\t\"");
						}
					}
					if (result1 === null) {
						if (input.charCodeAt(pos) === 10) {
							result1 = "\n";
							pos++;
						} else {
							result1 = null;
							if (reportFailures === 0) {
								matchFailed("\"\\n\"");
							}
						}
					}
				}
				while (result1 !== null) {
					result0.push(result1);
					if (input.charCodeAt(pos) === 32) {
						result1 = " ";
						pos++;
					} else {
						result1 = null;
						if (reportFailures === 0) {
							matchFailed("\" \"");
						}
					}
					if (result1 === null) {
						if (input.charCodeAt(pos) === 9) {
							result1 = "\t";
							pos++;
						} else {
							result1 = null;
							if (reportFailures === 0) {
								matchFailed("\"\\t\"");
							}
						}
						if (result1 === null) {
							if (input.charCodeAt(pos) === 10) {
								result1 = "\n";
								pos++;
							} else {
								result1 = null;
								if (reportFailures === 0) {
									matchFailed("\"\\n\"");
								}
							}
						}
					}
				}
				return result0;
			}
			
			function parse_$() {
				var result0;
				
				if (input.charCodeAt(pos) === 44) {
					result0 = ",";
					pos++;
				} else {
					result0 = null;
					if (reportFailures === 0) {
						matchFailed("\",\"");
					}
				}
				if (result0 === null) {
					if (input.charCodeAt(pos) === 10) {
						result0 = "\n";
						pos++;
					} else {
						result0 = null;
						if (reportFailures === 0) {
							matchFailed("\"\\n\"");
						}
					}
					if (result0 === null) {
						if (input.substr(pos, 2) === ",\n") {
							result0 = ",\n";
							pos += 2;
						} else {
							result0 = null;
							if (reportFailures === 0) {
								matchFailed("\",\\n\"");
							}
						}
					}
				}
				return result0;
			}
			
			
			function cleanupExpected(expected) {
				expected.sort();
				
				var lastExpected = null;
				var cleanExpected = [];
				for (var i = 0; i < expected.length; i++) {
					if (expected[i] !== lastExpected) {
						cleanExpected.push(expected[i]);
						lastExpected = expected[i];
					}
				}
				return cleanExpected;
			}
			
			function computeErrorPosition() {
				/*
				 * The first idea was to use |String.split| to break the input up to the
				 * error position along newlines and derive the line and column from
				 * there. However IE's |split| implementation is so broken that it was
				 * enough to prevent it.
				 */
				
				var line = 1;
				var column = 1;
				var seenCR = false;
				
				for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
					var ch = input.charAt(i);
					if (ch === "\n") {
						if (!seenCR) { line++; }
						column = 1;
						seenCR = false;
					} else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
						line++;
						column = 1;
						seenCR = true;
					} else {
						column++;
						seenCR = false;
					}
				}
				
				return { line: line, column: column };
			}
			
			
			var result = parseFunctions[startRule]();
			
			/*
			 * The parser is now in one of the following three states:
			 *
			 * 1. The parser successfully parsed the whole input.
			 *
			 *		- |result !== null|
			 *		- |pos === input.length|
			 *		- |rightmostFailuresExpected| may or may not contain something
			 *
			 * 2. The parser successfully parsed only a part of the input.
			 *
			 *		- |result !== null|
			 *		- |pos < input.length|
			 *		- |rightmostFailuresExpected| may or may not contain something
			 *
			 * 3. The parser did not successfully parse any part of the input.
			 *
			 *	 - |result === null|
			 *	 - |pos === 0|
			 *	 - |rightmostFailuresExpected| contains at least one failure
			 *
			 * All code following this comment (including called functions) must
			 * handle these states.
			 */
			if (result === null || pos !== input.length) {
				var offset = Math.max(pos, rightmostFailuresPos);
				var found = offset < input.length ? input.charAt(offset) : null;
				var errorPosition = computeErrorPosition();
				
				throw new this.SyntaxError(
					cleanupExpected(rightmostFailuresExpected),
					found,
					offset,
					errorPosition.line,
					errorPosition.column
				);
			}
			
			return result;
		},
		
		/* Returns the parser source code. */
		toSource: function() { return this._source; }
	};
	
	/* Thrown when a parser encounters a syntax error. */
	
	result.SyntaxError = function(expected, found, offset, line, column) {
		function buildMessage(expected, found) {
			var expectedHumanized, foundHumanized;
			
			switch (expected.length) {
				case 0:
					expectedHumanized = "end of input";
					break;
				case 1:
					expectedHumanized = expected[0];
					break;
				default:
					expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
						+ " or "
						+ expected[expected.length - 1];
			}
			
			foundHumanized = found ? quote(found) : "end of input";
			
			return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
		}
		
		this.name = "SyntaxError";
		this.expected = expected;
		this.found = found;
		this.message = buildMessage(expected, found);
		this.offset = offset;
		this.line = line;
		this.column = column;
	};
	
	result.SyntaxError.prototype = Error.prototype;
	
	return result;
})();

// END(BROWSER)

module.exports = L;

